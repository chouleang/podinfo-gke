pipeline {
    agent {
        docker {
            image 'google/cloud-sdk:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: 'chouleang/podinfo')
        string(name: 'IMAGE_TAG', defaultValue: 'latest')
        string(name: 'NAMESPACE', defaultValue: 'podinfo')
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/chouleang/podinfo-gke.git')
        string(name: 'GIT_BRANCH', defaultValue: 'main')
        string(name: 'MANIFESTS_PATH', defaultValue: '.')  // Path to YAML files in repo
    }
    
    environment {
        GKE_CLUSTER = "go-hello-cluster"
        GKE_ZONE = "asia-southeast1-a"
        PROJECT_ID = "it-enviroment"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                sh '''
                    echo "üì• Cloning deployment repository..."
                    git clone -b ${GIT_BRANCH} ${GIT_REPO} deployment-repo
                    cd deployment-repo
                    echo "üì¶ Repository content:"
                    ls -la
                    echo "üìÑ YAML files:"
                    find . -name "*.yaml" -o -name "*.yml" | head -10
                '''
            }
        }

        stage('Verify Cluster') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCP_CREDENTIALS')]) {
                        sh """
                            export CLOUDSDK_CONFIG=/tmp/gcloud-config
                            mkdir -p \$CLOUDSDK_CONFIG
                            
                            gcloud auth activate-service-account --key-file=\${GCP_CREDENTIALS}
                            
                            echo "üîç Checking cluster status..."
                            NODE_COUNT=\$(gcloud container clusters describe ${GKE_CLUSTER} \
                                --zone ${GKE_ZONE} \
                                --project ${PROJECT_ID} \
                                --format="value(currentNodeCount)" 2>/dev/null || echo "0")
                            
                            echo "Current node count: \$NODE_COUNT"
                            
                            if [ "\$NODE_COUNT" -eq "0" ]; then
                                echo "‚ö†Ô∏è  Cluster has 0 nodes! Resizing to 1 node..."
                                gcloud container clusters resize ${GKE_CLUSTER} \
                                    --zone ${GKE_ZONE} \
                                    --num-nodes=1 \
                                    --project ${PROJECT_ID} \
                                    --quiet
                                
                                echo "‚è≥ Waiting 2 minutes for node to be ready..."
                                sleep 120
                            fi
                        """
                    }
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCP_CREDENTIALS')]) {
                        sh """
                            export CLOUDSDK_CONFIG=/tmp/gcloud-config
                            export KUBECONFIG=/tmp/kube-config
                            mkdir -p \$CLOUDSDK_CONFIG
                            mkdir -p \$(dirname \$KUBECONFIG)
                            
                            cd deployment-repo/${MANIFESTS_PATH}
                            
                            echo "üìÑ Kubernetes manifests to deploy:"
                            ls -la *.yaml *.yml 2>/dev/null || echo "No YAML files found"
                            
                            gcloud auth activate-service-account --key-file=\${GCP_CREDENTIALS}
                            gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}
                            
                            echo "üèóÔ∏è Creating namespace if needed..."
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            echo "üöÄ Applying Kubernetes manifests..."
                            kubectl apply -f . -n ${NAMESPACE}
                            
                            echo "üîÑ Updating deployment image to ${DOCKER_IMAGE}:${IMAGE_TAG}..."
                            kubectl set image deployment/podinfo podinfo=${DOCKER_IMAGE}:${IMAGE_TAG} -n ${NAMESPACE}
                            
                            echo "‚è≥ Waiting for rollout (timeout: 600s)..."
                            kubectl rollout status deployment/podinfo -n ${NAMESPACE} --timeout=600s
                            
                            echo "‚úÖ Deployment completed!"
                        """
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCP_CREDENTIALS')]) {
                        sh """
                            export CLOUDSDK_CONFIG=/tmp/gcloud-config
                            export KUBECONFIG=/tmp/kube-config
                            
                            gcloud auth activate-service-account --key-file=\${GCP_CREDENTIALS}
                            gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}
                            
                            echo "üîç Verifying deployment..."
                            kubectl get all -n ${NAMESPACE}
                            
                            echo "üìä Pod status:"
                            kubectl get pods -n ${NAMESPACE} -o wide
                            
                            # Get service IP for testing
                            SERVICE_IP=\$(kubectl get service podinfo -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
                            if [ -n "\$SERVICE_IP" ]; then
                                echo "üåê Service URL: http://\${SERVICE_IP}:9898"
                                echo "üß™ Testing endpoints..."
                                timeout 60 bash -c 'until curl -sf http://\${SERVICE_IP}:9898/healthz >/dev/null; do sleep 5; done' && echo "‚úÖ Health check passed"
                            else
                                echo "‚ÑπÔ∏è  Service IP not available yet"
                            fi
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "üßπ Cleaning up..."
                rm -rf /tmp/gcloud-config /tmp/kube-config
                rm -rf deployment-repo
            '''
        }
        success {
            echo "üéâ CD Pipeline SUCCESS!"
            echo "üì¶ Deployed: ${DOCKER_IMAGE}:${IMAGE_TAG}"
            echo "üè∑Ô∏è Namespace: ${NAMESPACE}"
            echo "üìö Source: ${GIT_REPO}#${GIT_BRANCH}"
        }
        failure {
            echo "‚ùå CD Pipeline FAILED"
            script {
                withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCP_CREDENTIALS')]) {
                    sh """
                        export CLOUDSDK_CONFIG=/tmp/gcloud-config
                        export KUBECONFIG=/tmp/kube-config
                        
                        gcloud auth activate-service-account --key-file=\${GCP_CREDENTIALS}
                        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}
                        
                        echo "üîç Debugging failed deployment..."
                        kubectl get events -n ${NAMESPACE} --sort-by='.lastTimestamp' | tail -20
                        kubectl describe deployment podinfo -n ${NAMESPACE} || true
                    """
                }
            }
        }
    }
}
